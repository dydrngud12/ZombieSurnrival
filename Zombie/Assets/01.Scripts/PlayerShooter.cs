using System.Collections;
using System.Collections.Generic;
using UnityEngine;

// 주어진 Gun 오브젝트를 쏘거나 재장전
// 알맞은 애니메이션을 재생하고 IK를 사용해 캐릭터 양손이 총에 위치하도록 조정


public class PlayerShooter : MonoBehaviour
{
    public Gun gun; // 사용할 총
    public Transform gunPivot; // 총 배치의 기준점
    public Transform LeftHandMount; // 총의 왼쪽 손잡이, 왼소이 위치할 지점
    public Transform rightHandMount; // 총의 오른쪽 손잡이, 오른손이 위치할 지점

    private Playerlnput playerlnput; // 플레이어의 입력
    private Animation playerAnimator; // 애니메이터 컴포넌트
    // Start is called before the first frame update
    void Start()
    {
        // 사용할 컴포넌트 가져오기
        playerlnput = GetComponent<Playerlnput>();
        playerAnimator = GetComponent<Animation>();
    }

    

    private void OnEnable()
    {
        // 슈터가 활성화될 떄 총도 함께 활성화
        gun.gameObject.SetActive(true);
    }

    private void OnDisable()
    {
        // 슈터가 비활성화될 떄 총도 함께 비활성화
        gun.gameObject.SetActive(false);
    }

    // Update is called once per frame
    void Update()
    {
        // 입력을 감지하고 총을 발사하거나 재장전
        if (playerlnput.fire)
        {
            // 발사 입력 감지 시 총 발사
            gun.Fire();
        }
        else if (playerlnput.reload)
        {
            // 재장전 입력 감지 시 재장전
            if (gun.Reload())
            {
                // 재장전 성공 시에만 재장전 애니메이션 재생
                playerAnimator.SetTrigger("Reload");
            }
        }

        // 남은 탄알 UI 갱신
        UpdateUI();

    }

    // 탄알 UI 갱신
    private void UpdateUI()
    {
        if (gun != null && UIManager.instance != null)
        {
            // UI 매니저의 탄알 텍스트에 탄창의 탄알과 남은 전체 탄알 표시
            UIManager.instance.UpdateAmmoText(gun.magAmmo, gun.ammoRemain);
        }
    }


    // 애니메이터의 IK 갱신
    private void OnAnimatorIK(int layerIndex)
    {
        // 총의 기준점 gunPivot을 3D 모델의 오른쪽 팔꿈치 위치로 이동
        gunPivot.position = playerAnimator.GetIKHintPosition(AvatarIKHint.RightElbow);

        // IK 를 사용하여 왼손의 위치와 회전을 총의 왼쪽 손잡이에 맞춤
        playerAnimator.SetIKPositionWeight(AvatarIKGoal.LeftHand, 1.0f);
        playerAnimator.SetIKRotationWeight(AvatarIKGoal.LeftHand, 1.0f);

        playerAnimator.SetIKPosition(AvatarIKGoal.LeftHand, LeftHandMount.position);
        playerAnimator.SetIKRotation(AvatarIKGoal.LeftHand, LeftHandMount.rotation);

        // IK 를 사용하여 오른손의 우취와 회전을 총의 오른쪽 손잡이에 맞춤
        playerAnimator.SetIKPositionWeight(AvatarIKGoal.RightHand, 1.0f);
        playerAnimator.SetIKRotationWeight(AvatarIKGoal.RightHand, 1.0f);

        playerAnimator.SetIKPosition(AvatarIKGoal.RightHand, rightHandMount.position);
        playerAnimator.SetIKRotation(AvatarIKGoal.RightHand, rightHandMount.rotation);
    }
}

